<!DOCTYPE html>
<html>
<head>

    <script src="https://www.gstatic.com/firebasejs/5.2.0/firebase.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.1.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.1.0/firebase-database.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.1.0/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.1.0/firebase-firestore.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.1.0/firebase-messaging.js"></script>
    <script src="https://www.gstatic.com/firebasejs/5.1.0/firebase-functions.js"></script>
    <script>
        // Initialize Firebase
        var config = {
            apiKey: "AIzaSyCTw7rj9N40kJsfWKQVQ6VGG8bt-Q5iAO0",
            authDomain: "districtr-7a52f.firebaseapp.com",
            databaseURL: "https://districtr-7a52f.firebaseio.com",
            projectId: "districtr-7a52f",
            storageBucket: "districtr-7a52f.appspot.com",
            messagingSenderId: "520197873899"
        };
        firebase.initializeApp(config);
    </script>

    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <meta charset=utf-8 />
    <title>Districtr | Mapbox</title>
    <link rel='shortcut icon' href='path/to/favicon.ico' type='image/x-icon' />
    <link href='https://www.mapbox.com/base/latest/base.css' rel='stylesheet' />
    <link href='https://api.mapbox.com/mapbox-gl-js/v0.46.0/mapbox-gl.css' rel='stylesheet' />
    <script src='https://api.mapbox.com/mapbox-gl-js/v0.46.0/mapbox-gl.js'></script>
    <script src='https://api.mapbox.com/mapbox.js/plugins/turf/v3.0.11/turf.min.js'></script>
    <style type="text/css">
        body {margin: 0; padding: 0;}

        #map {position: absolute; top: 10%; bottom: 30% ; left: 21%; width: 38.5%;}

        #refmap {position: absolute; top: 10%; bottom: 30% ; left: 60.5%; width: 38.5%;}

        .map-title {
            font: 18px/26px 'Helvetica Neue', Arial, Helvetica, sans-serif;
            position: absolute;
            padding: 10px;
            left: 35.5%;
            top: 3%;
            text-anchor: middle;
            text-align: center;
        }

        .refmap-title {
            font: 18px/26px 'Helvetica Neue', Arial, Helvetica, sans-serif;
            position: absolute;
            padding: 10px;
            left: 70%;
            top: 3%;
            text-anchor: middle;
            text-align: center;
        }

        .side-column {
            font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
            position: absolute;
            width: 20%;
            top: 0%;
            left: 0%;
            bottom: 0%;
            padding: 10px;
            background-color: orangered;
        }

        .side-column .web-title {
            font: 42px/50px 'Helvetica Neue', Arial, Helvetica, sans-serif;
            position: absolute;
            width: 20%;
            top: 0%;
            left: 0%;
            padding: 10px;
            text-align: center;
            color: white;
        }

        .side-column .side-column-inner {
            border-radius:3px;
            position: absolute;
            top: 10%;
            left: 10px;
            right: 10px;
            padding: 10px;
            background-color: white;
        }

        /* Dropdown Button */
        .dropbtn {
            background-color: darkred;
            color: white;
            padding: 10px;
            font-size: 16px;
            border: none;
            border-radius:3px;
            top: 0%;
        }

        /* The container <div> - needed to position the dropdown content */
        .dropdown {
            position: relative;
            display: inline-block;
        }

        /* Dropdown Content (Hidden by Default) */
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f1f1f1;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
        }

        /* Links inside the dropdown */
        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }

        /* Change color of dropdown links on hover */
        .dropdown-content a:hover {background-color: #ddd;}

        /* Show the dropdown menu on hover */
        .dropdown:hover .dropdown-content {display: block;}

        /* Change the background color of the dropdown button when the dropdown content is shown */
        .dropdown:hover .dropbtn {background-color: #3e8e41;}

        .map-overlay {
             font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
             position: absolute;
             width: 38.5%;
             top: 70%;
             left: 21%;
             padding: 10px;
         }

        .map-overlay .map-overlay-inner {
            background-color: #fff;
            box-shadow:0 1px 2px rgba(0, 0, 0, 0.10);
            border-radius: 3px;
            padding: 10px;
            margin-bottom: 10px;
        }

        .map-overlay-inner fieldset{
            border: none;
            padding: 0;
            margin: 0 0 10px;
        }

        .refmap-overlay {
            font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
            position: absolute;
            width: 38.5%;
            top: 70%;
            left: 60.5%;
            padding: 10px;
        }

        .refmap-overlay .refmap-overlay-inner {
            background-color: #fff;
            box-shadow:0 1px 2px rgba(0, 0, 0, 0.10);
            border-radius: 3px;
            padding: 10px;
            margin-bottom: 10px;
        }

        .refmap-overlay-inner fieldset {
            border: none;
            padding: 0;
            margin: 0 0 10px;
        }

        .map-overlay-inner fieldset:last-child {
            margin: 0;
        }

        .map-overlay-inner select {
            width: 100%;
        }

        .map-overlay-inner label {
            display: block;
            font-weight: bold;
            margin: 0 0 5px;
        }

        .map-overlay-inner button {
            display: inline-block;
            width: 36px;
            height: 20px;
            border: none;
            cursor: pointer;
        }

        .map-overlay-inner button:focus {
            outline: none;
        }

        .map-overlay-inner button:hover {
            box-shadow:inset 0 0 0 3px rgba(0, 0, 0, 0.10);
        }
    </style>
</head>
<body>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<link href="https://cdn.jsdelivr.net/bootstrap.tagsinput/0.8.0/bootstrap-tagsinput.css" rel="stylesheet" />
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.2.1.js"></script>
<script src="https://cdn.jsdelivr.net/bootstrap.tagsinput/0.8.0/bootstrap-tagsinput.min.js"></script>

<div id='map'></div>

<div id='refmap'></div>

<div class='map-title'>
    <label>Districting Map</label>
</div>

<div class='refmap-title'>
    <label>Demographic Reference Map</label>
</div>

<div class='refmap-overlay top'>
    <div class='refmap-overlay-inner'>
        <fieldset>
            <label>Demographic Reference Map Menu</label>
        </fieldset>
    </div>
</div>


<div class='map-overlay top'>
    <div class='map-overlay-inner'>
        <fieldset>
            <div class="bs-example">
                <input type="text" name="tags" value="Congressional,Competitive" data-role="tagsinput" />
            </div>
            <hr>
            <label>Select the district you want to work on:</label>
            <div id='swatches'></div>
        </fieldset>
    </div>
</div>

<div class='side-column'>
    <div class="web-title">
        <label>Districtr</label>
    </div>
    <div class="side-column-inner">
        <fieldset id="Location">
            <legend>Location</legend>
            Where would you like to redistrict? <input type="text"><br>
        </fieldset>
        <fieldset id="Plan">
            <legend>Plan</legend>
            What kind of districting plan are you designing?
            <div class="dropdown">
                <button class="dropbtn">Dropdown</button>
                <div class="dropdown-content">
                    <a href="#">Link 1</a>
                    <a href="#">Link 2</a>
                    <a href="#">Link 3</a>
                </div>
            </div>
        </fieldset>
        <fieldset id="Units">
            <legend>Units</legend>
            Which units would you like to use? <input type="text"><br>
        </fieldset>
        <fieldset id="Districts">
            <legend>Districts</legend>
            If you would like to use a custom number of districts, please enter that number here: <input type="text"><br>
        </fieldset>
    </div>
</div>

<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiYWNzY2hhbGwiLCJhIjoiY2pqNGtmZHl5MDFvaTNrcWhneTkxbjY4byJ9.O4NgnBWw54faNeVKgpGT1A';

    var database = firebase.database();
    var filter;
    var databaseEndpoint = '/test7/';

    var geojson = featureCollection([]);
    var BLOCKID10 = [];
    var tags = [];
    var baseFilter = ['in', 'BLOCKID10'];
    var byColor;
    var districts = {type: 'FeatureCollection'};

    var paletteColors = [
        '#ffffcc',
        '#a1dab4',
        '#41b6c4',
        '#2c7fb8',
        '#253494',
        '#fed976',
        '#feb24c',
        '#fd8d3c',
        '#f03b20',
        '#bd0026'
    ];


    var districtGuide = {
        '#ffffcc': '1',
        '#a1dab4': '2',
        '#41b6c4': '3',
        '#2c7fb8': '4',
        '#253494': '5',
        '#fed976': '6',
        '#feb24c': '7',
        '#fd8d3c': '8',
        '#f03b20': '9',
        '#bd0026': '10'
    };

    var currentColor = paletteColors[0];


    var map = new mapboxgl.Map({
        container: 'map', // container id
        style: 'mapbox://styles/acschall/cjj64orrb14cl2rsum7cr4r5p', // stylesheet location
        center: [-71.311, 42.634], // starting position
        zoom: 12.5 // starting zoom
    });

    var refmap = new mapboxgl.Map({
        container: 'refmap', // container id
        style: 'mapbox://styles/acschall/cjja3gsda4t782so0hn6wb4pz', // stylesheet location
        center: [-71.311, 42.634], // starting position
        zoom: 12.5 // starting zoom
    });

    var overlay = document.getElementById('map-overlay');

    var popup = new mapboxgl.Popup({
        closeButton: false
    });

    var popup2 = new mapboxgl.Popup({
        closeButton: false
    });


    console.log(refmap.style.sourceCaches)

    map.on('load', function() {
        map.addSource('censusBlocks', {
            "type": "vector",
            "url": "mapbox://mapbox.mapbox-terrain-v2,mapbox.mapbox-streets-v7,acschall.5c3o5a0o,acschall.6jx1sm5k,acschall.56ti5rsj,acschall.34the8uf,acschall.dl2pdpaz,acschall.2zifcohf,acschall.32wy4f1m"
        });

        map.addLayer({
            "id": "blocks",
            "type": "fill",
            "source": "censusBlocks",
            "source-layer": "Archive-8tgzpm",
            "paint": {
                "fill-outline-color": "rgba(0,0,0,0.5)",
                "fill-color": "rgba(0,0,0,0.01)"
            }
        });


        paletteColors.forEach(function(color) {
            lay = addLayer(color);
            map.addLayer(lay, 'place-city-sm'); // Place polygon under these labels.)
        });

        var databaseObject = [];
        var starCountRef = firebase.database().ref(databaseEndpoint);
        starCountRef.once('value', function(snapshot) {

            if (snapshot.val() !== null) {
                databaseObject = snapshot.val();

                geojson = databaseObject.geojson;
                districts = databaseObject.districts;

                setPaintColors(geojson);
            } else {
                geojson = featureCollection([]);
                districts = {type: 'FeatureCollection'};
            }
        });

        map.on('click', function(e) {
            console.log('click');

            var features = map.queryRenderedFeatures(e.point, {
                layers: ['blocks']
            });

            let p = point([e.lngLat.lng, e.lngLat.lat]);
            let f = feature(p);

            t = $("input[name='tags']").tagsinput('items');
            f.properties.tags = t.toString();
            f.properties["fill-color"] = currentColor;
            f.properties.BLOCKID10 = features[0].properties.BLOCKID10;
            f.properties.name = features[0].properties.BLOCKID10;
            f.properties.district = districtGuide[currentColor];

            if (districts[f.properties.district]){
                districts[f.properties.district].push(f)
            } else {
                districts[f.properties.district] = [f]
            }

            rawCurrentColor = rawColorValue(currentColor);
            layer = 'blocks-highlighted-' + rawCurrentColor;

            geojson = updateGeojson(geojson, f);

            setPaintColors(geojson);

            firebase.database().ref(databaseEndpoint).set({
                geojson: geojson,
                districts: districts
            });

            makeDistrict(f.properties.district);

        });

        map.on('mousemove', function(e) {
            console.log('mousemove');
            var features = map.queryRenderedFeatures(e.point, {
                layers: ['blocks']
            });

            map.getCanvas().style.cursor = features.length ? 'pointer' : '';

            if (!features.length) {
                popup.remove();
                return;
            }


            var feature = features[0];

            var relatedFeatures = map.querySourceFeatures('blocks', {
                sourceLayer: 'Archive-8tgzpm',
                filter: ['in', 'BLOCKID10', feature.properties.BLOCKID10]
            });

            popup.setLngLat(e.lngLat)
                .setText('Block ID: ' + feature.properties.BLOCKID10)
                .addTo(map);
        });
    });


    refmap.on('load', function() {
        refmap.on('mousemove', function(e) {
            console.log('halp')
            var units = refmap.queryRenderedFeatures(e.point, {
                layers: ['Population Density']
            });

            refmap.getCanvas().style.cursor = units.length ? 'pointer' : '';

            if (!units.length) {
                popup2.remove();
                return;
            }


            var unit = units[0];

            popup2.setLngLat(e.lngLat)
                .setText('Population: ' + unit.properties.POP10)
                .addTo(refmap);
        });
    });


    function setPaintColors(geoJsonObject) {

        byColor = getBLOCKID10ByColor(geoJsonObject);

        // Special case when trying to remove the 'last' county
        if (byColor.length == 0) {
            filter = baseFilter;
            filter = filter.concat('[ ]');
            map.setFilter(layer, filter);
            return;
        }

        byColor.forEach(function(colorRow) {
            color = colorRow.color;
            rawCurrentColor = rawColorValue(color);
            layer = 'blocks-highlighted-' + rawCurrentColor;

            filter = baseFilter;
            filter = filter.concat(colorRow.BLOCKID10);

            map.setFilter(layer, filter);
            map.setPaintProperty(layer, 'fill-color', color);
        });
    }


    function featureCollection(f) {
        return {
            type: 'FeatureCollection',
            features: f
        };
    }

    function feature(geom) {
        return {
            type: 'Feature',
            geometry: geom,
            properties: properties()
        };
    }

    function point(coordinates) {
        return {
            type: 'Point',
            coordinates: coordinates
        };
    }

    // fill in the properties keys/values here
    function properties() {
        return {
            "fill-color": "#ff0000",
            "tags": "",
            "BLOCKID10": null,
            "name": "",
            "district": "none"
        };
    }

    function updateGeojson(geoJsonObject, feature) {

        var features = geoJsonObject.features;
        blockid10 = getBLOCKID10(geoJsonObject);

        if (blockid10) {
            blockid10Index = blockid10.indexOf(feature.properties.BLOCKID10);
        } else {
            blockid10Index = -1;
        }

        if (blockid10Index == -1) {
            features.push(feature);
        } else {
            filtered = geoJsonObject.features.filter(function removeBLOCKID10(value) {
                return value.properties.BLOCKID10 != feature.properties.BLOCKID10;
            });

            features = filtered;
        }

        return featureCollection(features);
    }

    function getBLOCKID10(geoJsonObject) {
        let filter = ['in', 'BLOCKID10'];

        if (geoJsonObject.features.length == 0) {
            return filter;
        }

        for (let f of geoJsonObject.features) {
            filter.push(f.properties.BLOCKID10);
        }

        return filter;
    }

    function getBLOCKID10ByColor(geoJsonObject) {

        value = [];
        colors = [];


        for (var f of geoJsonObject.features) {
            fillColor = f.properties['fill-color'];

            // add only unique colors to this array
            if (colors.indexOf(fillColor) == -1) {
                colors.push(fillColor);
            }
        }

        // now iterate overall features, again, to add BLOCKID10
        for (var c of colors) {
            uniqueBLOCKID10 = [];

            for (var ff of geoJsonObject.features) {
                fillColor = ff.properties['fill-color'];
                BLOCKID10 = ff.properties.BLOCKID10;

                if (c == fillColor) {
                    // color exists, so push only the BLOCKID10 value
                    uniqueBLOCKID10.push(BLOCKID10);
                }
            }

            colorBLOCKID10 = {
                color: '#123456',
                BLOCKID10: []
            };

            colorBLOCKID10.color = c;
            colorBLOCKID10.BLOCKID10 = uniqueBLOCKID10;

            value.push(colorBLOCKID10);
        }

        return value;
    }

    function findByColor(colors, findColor) {
        for (var c of colors) {
            if (findColor == c.color) {
                return c.BLOCKID10;
                break;
            }
        }
    }

    function getBLOCKID10() {
        byColor = getBLOCKID10ByColor(geojson);

        blockid10 = findByColor(byColor, currentColor);

        filter = baseFilter;
        filter = filter.concat(blockid10);

        return blockid10;
    }

    var swatches = document.getElementById('swatches');

    paletteColors.forEach(function(color) {

        var swatch = document.createElement('button');
        swatch.style.backgroundColor = color;
        swatch.label = districtGuide[color];
        swatch.addEventListener('click', function() {
            currentColor = color;
        });
        swatch.appendChild(document.createTextNode(districtGuide[color]));
        swatches.appendChild(swatch);

    });

    function rawColorValue(color) {
        return color.split('#')[1];
    }

    function addLayer(color) {

        var colorValue = rawColorValue(color);

        var layer = {
            "id": "blocks-highlighted-" + colorValue,
            "type": "fill",
            "source": "censusBlocks",
            "source-layer": "Archive-8tgzpm",
            "paint": {
                "fill-outline-color": "#888888",
                "fill-color": color,
                "fill-opacity": 0.75
            },
            "filter": [
                "in",
                "BLOCKID10",
                ""
            ]
        };

        return layer;
    }

    function makeDistrict(district) {
        var pieces = districts[district];
    }

    // jQuery
    $(function() {
        $('input').on('change', function(event) {

            var $element = $(event.target);
            var $container = $element.closest('.example');

            if (!$element.data('tagsinput'))
                return;

            var val = $element.val();
            if (val === null)
                val = "null";
            var items = $element.tagsinput('items');

        }).trigger('change');
    });


</script>
</body>
</html>
